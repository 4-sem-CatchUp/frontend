/**
 * Tests for ProfileAchievements component - generated by Coderabbit.
 * Framework: Vitest + React Testing Library
 *
 * Scenarios:
 * - renders title + list when achievements exist
 * - handles undefined data (loading/error) → shows only title
 * - handles empty data → shows only title
 * - calls useAchievementQuery with the username from params
 */
import React from 'react';
import { render, screen } from '@testing-library/react';
import { MemoryRouter, Routes, Route } from 'react-router-dom';
import { vi, type Mock } from 'vitest';

// Mock the achievements query hook
vi.mock('../api/index', () => ({
  useAchievementQuery: vi.fn(),
}));

import { useAchievementQuery } from '../api/index';
import ProfileAchievements from './ProfileAchievements';

// Utility: strongly-typed mock
const mockedUseAchievementQuery = useAchievementQuery as Mock;

const renderWithUsername = (username: string) =>
  render(
    <MemoryRouter initialEntries={[`/${username}`]}>
      <Routes>
        <Route path="/:username" element={<ProfileAchievements />} />
      </Routes>
    </MemoryRouter>
  );

beforeEach(() => {
  mockedUseAchievementQuery.mockReset();
});

describe('ProfileAchievements component', () => {
  it('renders Card title and list items when achievements are provided', () => {
    mockedUseAchievementQuery.mockReturnValue({
      data: [
        { id: '1', title: 'First Trophy', date: '2024-06-18' },
        { id: '2', title: 'Second Trophy', date: '2024-06-19' },
      ],
    });

    renderWithUsername('alice');

    // Title
    expect(screen.getByText(/achievements/i)).toBeInTheDocument();

    // List items
    const items = screen.getAllByRole('listitem');
    expect(items).toHaveLength(2);

    // Content checks
    expect(screen.getByText('First Trophy')).toBeInTheDocument();
    expect(screen.getByText(/\(2024-06-18\)/)).toBeInTheDocument();
    expect(screen.getByText('Second Trophy')).toBeInTheDocument();
    expect(screen.getByText(/\(2024-06-19\)/)).toBeInTheDocument();

    // Hook called with username
    expect(mockedUseAchievementQuery).toHaveBeenCalledWith('alice');
  });

  it('renders no items when data is undefined (loading/error state)', () => {
    mockedUseAchievementQuery.mockReturnValue({ data: undefined });

    renderWithUsername('bob');

    // No list items
    expect(screen.queryAllByRole('listitem')).toHaveLength(0);

    // Still shows title
    expect(screen.getByText(/achievements/i)).toBeInTheDocument();
  });

  it('renders no items when data is an empty array', () => {
    mockedUseAchievementQuery.mockReturnValue({ data: [] });

    renderWithUsername('charlie');

    // No list items
    expect(screen.queryAllByRole('listitem')).toHaveLength(0);

    // Still shows title
    expect(screen.getByText(/achievements/i)).toBeInTheDocument();
  });
});
