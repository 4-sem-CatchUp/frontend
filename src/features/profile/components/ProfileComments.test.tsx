/**
 * Tests for ProfileComments component - Generated by Coderabbit.
 * Framework: Vitest + React Testing Library
 *
 * Scenarios:
 * - renders Card with "Comments" title
 * - handles empty and undefined data
 * - renders multiple comments with text and date
 * - handles numeric and string ids
 * - passes username from params to query
 * - safe handling when username is missing
 */
import React from 'react';
import { render, screen } from '@testing-library/react';
import { vi, type Mock } from 'vitest';
import type { ReactNode } from 'react';

// Mock react-router-dom (useParams + routing helpers)
vi.mock('react-router-dom', async () => {
  const actual = await vi.importActual<typeof import('react-router-dom')>(
    'react-router-dom'
  );
  return {
    ...actual,
    useParams: vi.fn(),
    MemoryRouter: actual.MemoryRouter,
    Routes: actual.Routes,
    Route: actual.Route,
  };
});

// Mock API hook
vi.mock('../api/index', () => ({
  useCommentQuery: vi.fn(),
}));

// Mock Card
vi.mock('../../../components/ui/Card', () => {
  return {
    __esModule: true,
    default: function MockCard(props: { title?: string; children?: ReactNode }) {
      return (
        <div data-testid="card">
          {props.title ? <h2>{props.title}</h2> : null}
          <div data-testid="card-body">{props.children}</div>
        </div>
      );
    },
  };
});

import { useParams } from 'react-router-dom';
import { useCommentQuery } from '../api/index';
import ProfileComments from './ProfileComments';

type CommentItem = { id: string | number; text: string; date: string };

// Strongly-typed mocks
const mockUseParams = useParams as unknown as Mock;
const mockUseCommentQuery = useCommentQuery as Mock;

function arrange(params: { username?: string | null; data?: CommentItem[] | undefined }) {
  mockUseParams.mockReturnValue({ username: params.username ?? 'alice' });
  mockUseCommentQuery.mockReturnValue({ data: params.data });
  render(<ProfileComments />);
}

describe('ProfileComments', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  it('renders the Card with the "Comments" title', () => {
    arrange({ data: [] });
    expect(screen.getByTestId('card')).toBeInTheDocument();
    expect(screen.getByRole('heading', { name: /comments/i })).toBeInTheDocument();
  });

  it('renders no list items when data is an empty array', () => {
    arrange({ data: [] });
    const list = screen.getByRole('list');
    expect(screen.queryAllByRole('listitem')).toHaveLength(0);
    expect(list).toBeInTheDocument();
  });

  it('renders nothing in the list when data is undefined (query not resolved yet)', () => {
    arrange({ data: undefined });
    expect(screen.getByRole('list')).toBeInTheDocument();
    expect(screen.queryAllByRole('listitem')).toHaveLength(0);
  });

  it('renders multiple comments with text and date', () => {
    const comments: CommentItem[] = [
      { id: '1', text: 'Great profile!', date: '2023-08-01' },
      { id: '2', text: 'Nice work!', date: '2023-09-12' },
      { id: '3', text: 'Keep it up!', date: '2023-10-30' },
    ];
    arrange({ data: comments });

    const items = screen.getAllByRole('listitem');
    expect(items).toHaveLength(comments.length);

    comments.forEach((c) => {
      expect(screen.getByText(c.text)).toBeInTheDocument();
      expect(screen.getByText(new RegExp(`\\(${c.date}\\)`))).toBeInTheDocument();
    });
  });

  it('handles numeric and string ids without crashing (key diversity)', () => {
    const comments: CommentItem[] = [
      { id: 1, text: 'Numeric id', date: '2024-01-01' },
      { id: '2', text: 'String id', date: '2024-01-02' },
    ];
    arrange({ data: comments });
    expect(screen.getAllByRole('listitem')).toHaveLength(2);
    expect(screen.getByText('Numeric id')).toBeInTheDocument();
    expect(screen.getByText('String id')).toBeInTheDocument();
  });

  it('uses the username from route params to drive the query', () => {
    const comments: CommentItem[] = [{ id: 'a', text: 'Hello', date: '2024-02-02' }];
    arrange({ username: 'bob', data: comments });
    expect(mockUseCommentQuery).toHaveBeenCalledWith('bob');
    expect(screen.getByText('Hello')).toBeInTheDocument();
  });

  it('does not crash when username is missing but non-null assertion is used', () => {
    mockUseParams.mockReturnValue({ username: undefined });
    mockUseCommentQuery.mockReturnValue({ data: [] });
    expect(() => render(<ProfileComments />)).not.toThrow();
    expect(mockUseCommentQuery).toHaveBeenCalledWith(undefined);
    expect(screen.getByRole('list')).toBeInTheDocument();
  });
});
