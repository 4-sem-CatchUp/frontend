/**
 * Tests for ProfileActivity component - generated by Coderabbit.
 * Framework: Vitest + React Testing Library
 *
 * Scenarios:
 * - renders a Card with the title "Activity"
 * - no list items when data is undefined
 * - no list items when data is empty
 * - renders each activity item with link, content, date and type
 * - passes username from URL to useActivityQuery
 * - handles minimal fields gracefully
 * - handles duplicate content with stable keys
 */
import React from 'react';
import { describe, it, expect, beforeEach, vi, type Mock } from 'vitest';
import { render, screen, within } from '@testing-library/react';
import { MemoryRouter, Route, Routes } from 'react-router-dom';

// Under test
import ProfileActivity from './ProfileActivity';

// Mock Card component for stable rendering
vi.mock('../../../components/ui/Card', () => {
  const MockCard = ({ title, children }: any) => (
    <div data-testid="card">
      <div data-testid="card-title">{title}</div>
      {children}
    </div>
  );
  return { __esModule: true, default: MockCard };
});

// Mock useActivityQuery
const useActivityMock = vi.fn();
vi.mock('../api/index', () => ({
  __esModule: true,
  useActivityQuery: (username: string) => useActivityMock(username),
}));

// Utility renderer
function renderWithRoute(initialPath: string) {
  return render(
    <MemoryRouter initialEntries={[initialPath]}>
      <Routes>
        <Route path="/user/:username" element={<ProfileActivity />} />
      </Routes>
    </MemoryRouter>
  );
}

// Strongly-typed mock
const mockedUseActivity = useActivityMock as Mock;

describe('ProfileActivity component', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  it('renders a Card with the title "Activity"', () => {
    mockedUseActivity.mockReturnValue({ data: [] });
    renderWithRoute('/user/alice');

    const card = screen.getByTestId('card');
    const title = within(card).getByTestId('card-title');
    expect(title).toHaveTextContent(/activity/i);
  });

  it('renders nothing in the list when there is no activity (data undefined)', () => {
    mockedUseActivity.mockReturnValue({ data: undefined });
    renderWithRoute('/user/alice');

    const listItems = screen.queryAllByRole('listitem');
    expect(listItems).toHaveLength(0);
  });

  it('renders nothing in the list when activity is an empty array', () => {
    mockedUseActivity.mockReturnValue({ data: [] });
    renderWithRoute('/user/bob');

    const listItems = screen.queryAllByRole('listitem');
    expect(listItems).toHaveLength(0);
  });

  it('renders each activity item with link, content, date and type', () => {
    const activity = [
      { id: '1', content: 'Commented on post A', date: '2025-09-01', type: 'comment' },
      { id: '2', content: 'Created post B', date: '2025-09-02', type: 'post' },
    ];
    mockedUseActivity.mockReturnValue({ data: activity });

    renderWithRoute('/user/charlie');

    const items = screen.getAllByRole('listitem');
    expect(items).toHaveLength(2);

    // First item assertions
    expect(within(items[0]!).getByRole('link', { name: 'Commented on post A' }))
      .toHaveAttribute('href', '/');
    expect(within(items[0]!).getByText(/\(2025-09-01 - comment\)/i)).toBeInTheDocument();

    // Second item assertions
    expect(within(items[1]!).getByRole('link', { name: 'Created post B' }))
      .toHaveAttribute('href', '/');
    expect(within(items[1]!).getByText(/\(2025-09-02 - post\)/i)).toBeInTheDocument();
  });

  it('passes the username from the URL to useActivityQuery', () => {
    mockedUseActivity.mockReturnValue({ data: [] });

    renderWithRoute('/user/dora');
    expect(mockedUseActivity).toHaveBeenCalledTimes(1);
    expect(mockedUseActivity).toHaveBeenCalledWith('dora');
  });

  it('is robust when activity items have minimal required fields', () => {
    const activity = [
      { id: 'x', content: '', date: '2025-09-10', type: 'unknown' },
    ];
    mockedUseActivity.mockReturnValue({ data: activity });

    renderWithRoute('/user/eric');
    const [item] = screen.getAllByRole('listitem');
    expect(item).toBeTruthy();

    // Use non-null assertion so TS knows it's safe
    const link = within(item!).getByRole('link');
    expect(link).toHaveAttribute('href', '/');
    expect(within(item!).getByText(/\(2025-09-10 - unknown\)/i)).toBeInTheDocument();
  });

  it('handles duplicate content gracefully by relying on stable keys (by id)', () => {
    const activity = [
      { id: 'a1', content: 'Same content', date: '2025-09-01', type: 'comment' },
      { id: 'a2', content: 'Same content', date: '2025-09-02', type: 'post' },
    ];
    mockedUseActivity.mockReturnValue({ data: activity });

    renderWithRoute('/user/frank');
    const links = screen.getAllByRole('link', { name: 'Same content' });
    expect(links).toHaveLength(2);
  });
});
